---
# 1. Ensure dependencies, Tailscale, and get Tailscale IPs
- name: Ensure dependencies and Tailscale on all RKE2 hosts
  hosts: rke_cluster
  become: true
  gather_facts: true
  vars_files:
    - vars/ts.yml
  vars:
    ubuntu_codename: "{{ ansible_distribution_release }}"
  tasks:
    - name: Ensure apt dependencies
      apt:
        name: [curl, gnupg]
        state: present
        update_cache: yes
    - name: Setup Tailscale apt signing key and repo
      apt_key:
        url: "https://pkgs.tailscale.com/stable/ubuntu/{{ ubuntu_codename }}.noarmor.gpg"
        state: present
      when: ansible_distribution == "Ubuntu"
    - name: Add Tailscale apt repository
      apt_repository:
        repo: "deb https://pkgs.tailscale.com/stable/ubuntu {{ ubuntu_codename }} main"
        state: present
        update_cache: yes
      when: ansible_distribution == "Ubuntu"
    - name: Install Tailscale
      apt:
        name: tailscale
        state: present
    - name: Ensure Tailscale daemon is running
      systemd:
        name: tailscaled
        enabled: yes
        state: started
    - name: Authenticate Tailscale if needed
      shell: "tailscale status || tailscale up --authkey {{ tailscale_auth_key }}"
      args:
        executable: /bin/bash
    - name: Get Tailscale IPv4 address
      command: tailscale ip -4
      register: ts_ip
      changed_when: false
    - name: Set Tailscale IP as a fact for later use
      set_fact:
        tailscale_ipv4: "{{ ts_ip.stdout }}"
    - name: Ensure RKE2 config directory exists
      file:
        path: /etc/rancher/rke2
        state: directory

###############################################
# MASTER NODES
###############################################
- name: Install and configure RKE2 server (master)
  hosts: k8s-master
  become: true
  gather_facts: false
  vars_files:
    - vars/ts.yml
  tasks:
    - name: Get master's LAN IP from Ansible facts
      set_fact:
        master_lan_ip:
          stdout: "{{ ansible_default_ipv4.address }}"
    - name: Download and install RKE2 if not present
      stat:
        path: /usr/local/bin/rke2
      register: rke2_binary
    - name: Install RKE2 server
      shell: curl -sfL https://get.rke2.io | sh -
      when: not rke2_binary.stat.exists
      args:
        executable: /bin/bash
    - name: Ensure kubectl via snap
      command: snap install kubectl --classic
      args:
        creates: /snap/bin/kubectl
    - name: Write RKE2 server config (Tailscale advertise, Canal over mesh)
      copy:
        content: |
          advertise-address: {{ tailscale_ipv4 }}
          bind-address: 0.0.0.0
          node-ip: {{ tailscale_ipv4 }}
          node-external-ip: {{ master_lan_ip.stdout }}
          tls-san:
            - {{ tailscale_ipv4 }}
            - {{ master_lan_ip.stdout }}
            - localhost
            - 127.0.0.1
            - 0.0.0.0
          disable:
            - rke2-ingress-nginx
        dest: /etc/rancher/rke2/config.yaml
        owner: root
        group: root
        mode: 0644
    - name: Remove nginx ingress manifest if present
      file:
        path: /var/lib/rancher/rke2/server/manifests/rke2-ingress-nginx.yaml
        state: absent
    - name: Enable and start RKE2 server
      systemd:
        name: rke2-server
        state: started
        enabled: yes
        daemon_reload: yes
    - name: Wait for kubeconfig to exist
      wait_for:
        path: /etc/rancher/rke2/rke2.yaml
        timeout: 120
    - name: Create RKE2 Canal config to use Tailscale interface
      copy:
        content: |
          ---
          apiVersion: helm.cattle.io/v1
          kind: HelmChartConfig
          metadata:
            name: rke2-canal
            namespace: kube-system
          spec:
            valuesContent: |-
              flannel:
                iface: "tailscale0"
                backend: "vxlan"
        dest: /var/lib/rancher/rke2/server/manifests/rke2-canal-config.yaml
        owner: root
        group: root
        mode: 0644
    - name: Wait for Canal to restart with new config
      pause:
        seconds: 30
    - name: Create local kubeconfig copy for server operations
      copy:
        src: /etc/rancher/rke2/rke2.yaml
        dest: /etc/rancher/rke2/rke2-local.yaml
        remote_src: yes
        owner: root
        group: root
        mode: 0644
    - name: Replace server address in local kubeconfig to use localhost
      replace:
        path: /etc/rancher/rke2/rke2-local.yaml
        regexp: "server: https://.*:6443"
        replace: "server: https://127.0.0.1:6443"
    - name: Replace 127.0.0.1 or tailscale IP in external kubeconfig with master LAN IP
      replace:
        path: /etc/rancher/rke2/rke2.yaml
        regexp: "server: https://.*:6443"
        replace: "server: https://{{ master_lan_ip.stdout }}:6443"
    - name: Restart Canal daemonset to apply new configuration
      shell: |
        export KUBECONFIG=/etc/rancher/rke2/rke2-local.yaml
        /var/lib/rancher/rke2/bin/kubectl rollout restart ds rke2-canal -n kube-system
      ignore_errors: yes
    - name: Fetch kubeconfig with LAN IP to control machine
      fetch:
        src: /etc/rancher/rke2/rke2.yaml
        dest: "../K8s/kubeconfigs/rke2-{{ inventory_hostname }}.yaml"
        flat: yes
    - name: Grab join token
      command: cat /var/lib/rancher/rke2/server/node-token
      register: join_token
      changed_when: false
    - name: Set join token fact for worker hosts
      set_fact:
        rke2_join_token: "{{ join_token.stdout }}"
        rke2_master_ip: "{{ tailscale_ipv4 }}"
        rke2_master_lan_ip: "{{ master_lan_ip.stdout }}"
    - name: Add master info to Ansible in-memory host
      add_host:
        name: rke2_facts
        rke2_token: "{{ rke2_join_token }}"
        rke2_master_ip: "{{ rke2_master_ip }}"
        rke2_master_lan_ip: "{{ rke2_master_lan_ip }}"
      delegate_to: localhost
    - name: Wait for API server to be ready with new configuration
      uri:
        url: "https://{{ master_lan_ip.stdout }}:6443/healthz"
        method: GET
        validate_certs: no
        timeout: 10
      register: result
      retries: 12
      delay: 10
      until: result.status == 200
      ignore_errors: yes
    - name: Pod-to-Tailscale routing for API server connectivity
      shell: |
        POD_CIDR="10.42.0.0/16"
        iptables -C FORWARD -s $POD_CIDR -d 100.64.0.0/10 -j ACCEPT 2>/dev/null || \
        iptables -I FORWARD -s $POD_CIDR -d 100.64.0.0/10 -j ACCEPT
        iptables -t nat -C POSTROUTING -s $POD_CIDR -d 100.64.0.0/10 -j MASQUERADE 2>/dev/null || \
        iptables -t nat -I POSTROUTING -s $POD_CIDR -d 100.64.0.0/10 -j MASQUERADE
        ip route add 100.64.0.0/10 dev tailscale0 2>/dev/null || true
      ignore_errors: yes
    - name: Update Kubernetes service endpoint to use LAN IP for pod connectivity
      shell: |
        export KUBECONFIG=/etc/rancher/rke2/rke2-local.yaml
        MASTER_LAN_IP="{{ master_lan_ip.stdout }}"
        CURRENT_IP=$(/var/lib/rancher/rke2/bin/kubectl get endpoints kubernetes -o jsonpath='{.subsets[0].addresses[0].ip}' 2>/dev/null || echo "")
        if [[ "$CURRENT_IP" != "$MASTER_LAN_IP" ]]; then
          /var/lib/rancher/rke2/bin/kubectl patch endpoints kubernetes --type='merge' -p='{"subsets":[{"addresses":[{"ip":"'$MASTER_LAN_IP'"}],"ports":[{"name":"https","port":6443,"protocol":"TCP"}]}]}'
        fi
      ignore_errors: yes

###############################################
# WORKER NODES
###############################################
- name: Install and configure RKE2 agent (worker)
  hosts: k8s-worker
  become: true
  gather_facts: false
  vars_files:
    - vars/ts.yml
  tasks:
    - name: Wait for Master facts
      pause:
        seconds: 10
    - name: Gather join token and master IPs from master
      set_fact:
        rke2_token: "{{ hostvars[groups['k8s-master'][0]].rke2_join_token }}"
        rke2_master_ip: "{{ hostvars[groups['k8s-master'][0]].rke2_master_ip }}"
        rke2_master_lan_ip: "{{ hostvars[groups['k8s-master'][0]].rke2_master_lan_ip }}"
    - name: Download and install RKE2 agent if not present
      stat:
        path: /usr/local/bin/rke2
      register: rke2_agent_binary
    - name: Install RKE2 agent
      shell: curl -sfL https://get.rke2.io | INSTALL_RKE2_TYPE=agent sh -
      when: not rke2_agent_binary.stat.exists
      args:
        executable: /bin/bash
    - name: Get worker's LAN IP from Ansible facts
      set_fact:
        worker_lan_ip:
          stdout: "{{ ansible_default_ipv4.address }}"
    - name: Write RKE2 agent config (Canal over mesh)
      copy:
        content: |
          server: https://{{ rke2_master_ip }}:9345
          token: {{ rke2_token }}
          node-ip: {{ tailscale_ipv4 }}
          node-external-ip: {{ worker_lan_ip.stdout }}
          disable:
            - rke2-ingress-nginx
        dest: /etc/rancher/rke2/config.yaml
        owner: root
        group: root
        mode: '0644'
    - name: Enable and start RKE2 agent
      systemd:
        name: rke2-agent
        enabled: yes
        state: started
        daemon_reload: yes
    - name: Pod-to-Tailscale routing on worker nodes
      shell: |
        POD_CIDR="10.42.0.0/16"
        iptables -C FORWARD -s $POD_CIDR -d 100.64.0.0/10 -j ACCEPT 2>/dev/null || \
        iptables -I FORWARD -s $POD_CIDR -d 100.64.0.0/10 -j ACCEPT
        iptables -t nat -C POSTROUTING -s $POD_CIDR -d 100.64.0.0/10 -j MASQUERADE 2>/dev/null || \
        iptables -t nat -I POSTROUTING -s $POD_CIDR -d 100.64.0.0/10 -j MASQUERADE
        ip route add 100.64.0.0/10 dev tailscale0 2>/dev/null || true
      ignore_errors: yes

###############################################
# FINAL VERIFICATION - Cluster Node Readiness
###############################################
- name: Final cluster check - Ensure all nodes are Ready
  hosts: k8s-master
  become: true
  gather_facts: false
  tasks:
    - name: Wait for cluster to settle
      pause:
        seconds: 25
    - name: Show cluster nodes status
      shell: |
        export KUBECONFIG=/etc/rancher/rke2/rke2-local.yaml
        /var/lib/rancher/rke2/bin/kubectl get nodes -o wide
      register: nodes_status
      retries: 6
      delay: 10
      until: '" Ready " in nodes_status.stdout'
    - name: Display kubectl get nodes result
      debug:
        var: nodes_status.stdout_lines