- name: Deploy Docker Applications for PVE-2
  hosts: all
  become: true
  strategy: free
  ignore_unreachable: yes

  # All app mapping defined & patched in pre_tasks!
  pre_tasks:
    - name: Define docker apps by host (without cadvisor)
      ansible.builtin.set_fact:
        _docker_apps_by_host:
          Docker-2:
            - { name: traefik }
            - { name: heimdall }
            - { name: homepage-2, restart: true }
            - { name: pdf }
            - { name: homeassistant }
            - { name: portainer }
            - { name: upsnap }
          DNS-2:
            - { name: adguardhome }

    - name: Ensure cadvisor is installed on all docker hosts
      ansible.builtin.set_fact:
        docker_apps_by_host: >-
          {{
            _docker_apps_by_host
            | dict2items
            | map('combine',
                {'key': item.key,
                  'value': (item.value + [ {'name': 'cadvisor'} ]) | unique(attribute='name')
                })
            | list | items2dict
          }}
      vars:
        item: "{{ item }}"
      loop: "{{ _docker_apps_by_host | dict2items }}"

  tasks:
    - name: Skip all tasks if host is unreachable
      meta: end_host
      when: ansible_unreachable is defined and ansible_unreachable

    - name: Check if host has docker apps
      ansible.builtin.set_fact:
        has_docker_apps: "{{ inventory_hostname in docker_apps_by_host and docker_apps_by_host[inventory_hostname]|length > 0 }}"
      when: not (ansible_unreachable is defined and ansible_unreachable)

    - name: Ensure Docker is installed (only if needed)
      ansible.builtin.include_tasks: ./Tasks/install_docker.yml
      when: has_docker_apps | default(false)

    - name: Deploy docker apps (only if host has apps)
      ansible.builtin.include_tasks: ./Tasks/docker.yml
      loop: "{{ docker_apps_by_host[inventory_hostname] | default([]) }}"
      loop_control:
        loop_var: item
      when: has_docker_apps | default(false)
      vars:
        application: "{{ item.name }}"
        restart: "{{ item.restart | default(omit) }}"
        pull_latest: "{{ item.pull_latest | default(omit) }}"